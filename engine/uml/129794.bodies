class Particle_Src
!!!135426.cpp!!!	Random_Gaussian_JM(in m : double, in s : double) : double
	if (fabs(s)<0.0001) return m;
	unsigned  n1,n2;
	double    x1,x2,y;
	// on ne veut pas que <x1> et <x2> soit nuls
	while((n1 = rand(),0 == n1));
	while((n2 = rand(),0 == n2));
	x1 = n1/((double)(unsigned)(-2));
	x2 = n2/((double)(unsigned)(-2));
	// methode de Boc-Muller
	// <y> suit une loi normale reduite (m=0,s=1)
	y = sqrt(-2*log(x1))*cos(2.*MATH_PI*x2);
	return m + s*y;
!!!135810.cpp!!!	update() : bool
	float angle_m_tmp=angle_m;
	
	//add lock speed to particules speeds ??
	//not now
	if (lock!=NULL)
	{
		y=lock->y+lock_y;
		if (lock->isXflipped())
		{
			x=lock->x-lock_x;
			angle_m_tmp+=MATH_PI;
		}else{
			x=lock->x+lock_x;
		}
	}
	
	float to_add=Random_Gaussian_JM(density_m,density_s);
	if (to_add<0) to_add=0.0;
	nbr_part_to_throw+=to_add;
	while(nbr_part_to_throw>1)
	{
		Particle * obj=new Particle(part_type);
		obj->x=x;
		obj->y=y;
		float speed=Random_Gaussian_JM(speed_m,speed_s);
		float alpha=Random_Gaussian_JM(angle_m_tmp,angle_s);
		obj->speed_x=speed*cos(alpha);
		if (obj->speed_x<0) obj->set_flipX(true);
		obj->speed_y=speed*sin(alpha);
		objs.push_back(obj);
		nbr_part_to_throw--;
	}
	//std::cout<<"update part !!\n";
	return false;
!!!135938.cpp!!!	set_lock(inout _lock : Anim_Sprite, in _lock_x : float, in _lock_y : float) : void
	lock=_lock;
	lock_x=_lock_x;
	lock_y=_lock_y;
